version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres
    environment:
      POSTGRES_DB: auth_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Go Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: auth_backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=auth_app
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=8080
      - ENV=production
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    restart: unless-stopped

  # React Frontend (Nginx)
  frontend:
    build:
      context: .
      dockerfile: Dockerfile.frontend
    container_name: auth_frontend
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - auth_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  auth_network:
    driver: bridge 