version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres_dev
    environment:
      POSTGRES_DB: auth_app
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data_dev:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - auth_network_dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Go Backend (Development)
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: auth_backend_dev
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=postgres
      - DB_PASSWORD=password
      - DB_NAME=auth_app
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - PORT=8080
    ports:
      - "8080:8080"
    volumes:
      - ./server:/app
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network_dev
    command: go run main.go

  # React Frontend (Development)
  frontend:
    image: node:20-alpine
    container_name: auth_frontend_dev
    working_dir: /app
    environment:
      - REACT_APP_API_URL=http://localhost:8080
    ports:
      - "3000:3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - auth_network_dev
    command: npm run dev

volumes:
  postgres_data_dev:

networks:
  auth_network_dev:
    driver: bridge 