version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: auth_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-auth_app}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5433:5432"
    networks:
      - auth_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    restart: unless-stopped

  # Go Backend
  backend:
    build:
      context: .
      dockerfile: Dockerfile.backend
    container_name: auth_backend
    environment:
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=${DB_USER:-postgres}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - DB_NAME=${DB_NAME:-auth_app}
      - JWT_SECRET=${JWT_SECRET}
      - PORT=${PORT:-8080}
      - ENV=development
    ports:
      - "${PORT:-8080}:8080"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - auth_network
    restart: unless-stopped

  # React Frontend (Development with HMR)
  frontend:
    image: node:20-alpine
    container_name: auth_frontend
    working_dir: /app
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 3000"
    volumes:
      - ./client:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    environment:
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8080}
      - VITE_ENV=development
    depends_on:
      - backend
    networks:
      - auth_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  auth_network:
    driver: bridge 